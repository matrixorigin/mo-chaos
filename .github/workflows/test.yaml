name: Just for Test
on:
  workflow_dispatch:
jobs:
#  Deploy:
#    runs-on: amd64-tke-dind
#    steps:
#      - uses: actions/checkout@v4
#      - name: Deploy
#        env:
#          COS_AK: ${{ secrets.COS_AK }}
#          COS_SK: ${{ secrets.COS_SK }}
#        run: |
#          chmod +x .github/workflows/tke/install-mo.sh
#          .github/workflows/tke/install-mo.sh
#        shell: bash
#      - name: Upload mo cluster artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: mo-cluster
#          path: |
#            name
#  Wait-Until-Ready:
#    runs-on: amd64-tke-dind
#    needs:
#      - Deploy
#    steps:
#      - uses: actions/checkout@v4
#      - name: Download mo cluster artifact
#        uses: actions/download-artifact@v3
#        with:
#          name: mo-cluster
#          path: .
#      - name: Wait
#        run: |
#          chmod +x .github/workflows/tke/wait.sh
#          .github/workflows/tke/wait.sh
#        shell: bash
#  Prepare-Cn-Data:
#    runs-on: amd64-tke-dind
#    needs:
#      - Wait-Until-Ready
#    steps:
#      - uses: actions/checkout@v4
#      - name: Download mo cluster artifact
#        uses: actions/download-artifact@v3
#        with:
#          name: mo-cluster
#          path: .
#      - name: Clone Data
#        run: |
#          chmod +x .github/workflows/tke/prepare-cn-data.sh
#          .github/workflows/tke/prepare-cn-data.sh
#        shell: bash

#  bvt_test:
#    name: MO CHECKIN BVT TEST
#    runs-on: amd64-tke-mo
#    steps:
#      - name: Clone MO-Tester
#        uses: actions/checkout@v3
#        with:
#          repository: matrixorigin/mo-tester
#          path: ./mo-tester
#          ref: main
#      - name: Clone matrixone Repo
#        uses: actions/checkout@v3
#        with:
#          repository: matrixorigin/matrixone
#          ref: main
#          path: ./matrixone
#      - name: Download mo cluster artifact
#        uses: actions/download-artifact@v3
#        with:
#          name: mo-cluster
#          path: .
#      - name: Set JAVA PATH
#        run: |
#          echo "$JAVA_HOME/bin" >> $GITHUB_PATH
#      - name: Generate MO-Tester Config and Start BVT Test
#        timeout-minutes: 20
#        run: |
#          name=cbhufqauf1n8p599
#          NAMESPACE=chaos-$name
#          export LC_ALL="C.UTF-8"
#          locale
#          sed -i "s/127.0.0.1:6001/$name-tp-cn.$NAMESPACE:6001/" ./mo-tester/mo.yml
#          sed -i 's/socketTimeout:.*/socketTimeout: 300000/g' ./mo-tester/mo.yml
#          sed -i 's/waittime:.*/waittime: 2000/g' ./mo-tester/run.yml
#          cat ./mo-tester/mo.yml
#          echo "=========================="
#          cat ./mo-tester/run.yml
#          echo "=========================="
#
#          cd $GITHUB_WORKSPACE/mo-tester
#          ./run.sh -n -g -o -p $GITHUB_WORKSPACE/matrixone/test/distributed/cases -s $GITHUB_WORKSPACE/matrixone/test/distributed/resources -e optimistic  2>&1
#          rm -rf .git lib

#  sysbench_oltp_test:
#    name: SYSBENCH OLTP TEST
#    runs-on: amd64-tke-mo
#    timeout-minutes: 150
#    steps:
#      - name: Clone MO-Load
#        uses: actions/checkout@v4
#        with:
#          repository: matrixorigin/mo-load
#          path: ./mo-load
#          token: ${{secrets.TEST_TOKEN}}
#          ref: main
#      - name: Set JAVA PATH
#        run: |
#          echo "$JAVA_HOME/bin" >> $GITHUB_PATH
#      - name: Start OLTP Point Select Test With 100 Threads
#        if: always()
#        run: |
#          name=tx9t85m29wpgfbib
#          NAMESPACE=chaos-$name
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-load
#          sed -i "s/127.0.0.1:6001/$name-tp-cn.$NAMESPACE:6001/" mo.yml
#          sed -i 's/true/false/g' sysbench.yml
#          echo 'Start Prepare Data of 10-tables-100000-per-table'
#          ./start.sh -m SYSBENCH -n 10 -s 100000
#          sleep 10
#
#          echo ''
#          echo 'Start OLTP Point Select Test With 100 threads'
#          ./start.sh -c cases/sysbench/point_select_10_100000 -t 100 -d 10 -g -b sbtest
#
#      - name: Start OLTP Point Select Test With 1000 Threads
#        if: always()
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-load
#          echo 'Start Prepare Data of 10-tables-100000-per-table'
#          ./start.sh -m SYSBENCH -n 10 -s 100000
#          sleep 10
#
#          echo ''
#          echo 'Start OLTP Point Select Test With 1000 threads'
#          ./start.sh -c cases/sysbench/point_select_10_100000 -t 1000 -d 10 -g -b sbtest
#
#      - name: Start OLTP Update Test With 100 Threads
#        if: always()
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-load
#          echo 'Start Prepare Data of 10-tables-100000-per-table'
#          ./start.sh -m SYSBENCH -n 10 -s 100000
#          sleep 10
#
#          echo ''
#          echo 'Start OLTP UPDATE Test With 100 threads'
#          ./start.sh -c cases/sysbench/update_pk_10_100000_rc -t 100 -d 10 -g -b sbtest
#
#      - name: Start OLTP Update Test With 1000 Threads
#        if: always()
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-load
#          echo 'Start Prepare Data of 10-tables-100000-per-table'
#          ./start.sh -m SYSBENCH -n 10 -s 100000
#          sleep 10
#
#          echo ''
#          echo 'Start OLTP UPDATE Test With 500 threads'
#          ./start.sh -c cases/sysbench/update_pk_10_100000_rc -t 1000 -d 10 -g -b sbtest
#
#      - name: Start OLTP Insert Test With 100 Threads
#        if: always()
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-load
#          echo 'Start Prepare Data of 10-tables-100000-per-table'
#          ./start.sh -m SYSBENCH -n 10 -s 100000
#          sleep 10
#
#          echo ''
#          echo 'Start OLTP Insert Test With 100 threads'
#          ./start.sh -c cases/sysbench/simple_insert_10_100000 -t 100 -d 10 -g -b sbtest
#
#      - name: Start OLTP Insert Test With 1000 Threads
#        if: always()
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-load
#          echo 'Start Prepare Data of 10-tables-100000-per-table'
#          ./start.sh -m SYSBENCH -n 10 -s 100000
#          sleep 10
#
#          echo ''
#          echo 'Start OLTP Insert Test With 1000 threads'
#          ./start.sh -c cases/sysbench/simple_insert_10_100000 -t 1000 -d 10 -g -b sbtest
#
#      - name: Start OLTP Delete Test With 100 Threads
#        if: always()
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-load
#          echo 'Start Prepare Data of 10-tables-100000-per-table'
#          ./start.sh -m SYSBENCH -n 10 -s 100000
#          sleep 10
#
#          echo ''
#          echo 'Start OLTP Delete Test With 100 threads'
#          ./start.sh -c cases/sysbench/delete_pk_10_100000_rc -t 100 -d 10 -g -b sbtest
#
#      - name: Start OLTP Delete Test With 1000 Threads
#        if: always()
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-load
#          echo 'Start Prepare Data of 10-tables-100000-per-table'
#          ./start.sh -m SYSBENCH -n 10 -s 100000
#          sleep 10
#
#          echo ''
#          echo 'Start OLTP Delete Test With 1000 threads'
#          ./start.sh -c cases/sysbench/delete_pk_10_100000_rc -t 1000 -d 10 -g -b sbtest
#
#      - name: Start OLTP Insert AutoIncrement Test With 100 Threads
#        if: always()
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-load
#          sed -i 's/false/true/g' sysbench.yml
#          echo 'Start Prepare AutoIncremental Data of 10-tables-100000-per-table'
#          ./start.sh -m SYSBENCH -n 10 -s 100000
#          sleep 10
#
#          echo ''
#          echo 'Start OLTP Insert Test With 100 threads'
#          ./start.sh -c cases/sysbench/simple_insert_10_100000_auto -t 100 -d 10 -g -b sbtest

  tpcc_benchmark_test:
    if: always()
    name: TPCC BENCHMARK TEST
    runs-on: amd64-tke-mo
    timeout-minutes: 120
    steps:
      - name: Clone MO-Load-Data
        uses: actions/checkout@v4
        with:
          repository: matrixorigin/mo-load-data
          path: ./mo-load-data
          token: ${{secrets.TEST_TOKEN}}
          ref: main
      - name: Clone MO-Tpcc
        uses: actions/checkout@v4
        with:
          repository: matrixorigin/mo-tpcc
          path: ./mo-tpcc
          ref: main
      - name: Set JAVA PATH
        run: |
          echo "$JAVA_HOME/bin" >> $GITHUB_PATH
      - name: Setup TPCC
        env:
          COS_AK: ${{ secrets.COS_AK }}
          COS_SK: ${{ secrets.COS_SK }}
        run: |
          echo "ENDPOINT: "https://cos.ap-chengdu.myqcloud.com"
          ACCESS_KEY_ID: "$COS_AK"
          SECRET_ACCESS_KEY: "$COS_SK"" > mo-load-data/access.yml
      - name: Load TPCC 10 Warehouse Data
        if: ${{ always() && !cancelled() }}
        run: |
          name=c7y34eqgtf8qw9dq
          NAMESPACE=chaos-$name
          export LC_ALL="C.UTF-8"
          locale
          cd mo-load-data
          ./load.sh -c cases/tpcc_10_no_partition -h $name-tp-cn.$NAMESPACE -b mo-load-data-1308875761 -m -r

#      - name: Load TPCC 100 Warehouse Data
#        if: ${{ always() && !cancelled() }}
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-load-data
#          ./load.sh -c cases/tpcc_100_no_partition -m -r
#
#      - name: Load TPCC 500 Warehouse Data
#        if: ${{ always() && !cancelled() }}
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-load-data
#          ./load.sh -c cases/tpcc_500_no_partition -m -r
#
#      - name: Load TPCC 1000 Warehouse Data
#        if: ${{ always() && !cancelled() }}
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-load-data
#          ./load.sh -c cases/tpcc_1000_no_partition -m -r
#
#      - name: Start TPCC 10 Warehouses 10 terminals Test
#        if: ${{ always() && !cancelled() }}
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-tpcc
#          if [ -e benchmarksql-error.log ];then rm -fr benchmarksql-error.log; fi
#
#          sed -i '/.*terminals=*/c\terminals=10' props_10.mo
#          sed -i '/expectedErrorCodes=/d' props_10.mo
#          ./runBenchmark.sh props_10.mo
#          ./runVerify.sh props_10.mo
#
#          if [ -f benchmarksql-error.log ];then
#            mv benchmarksql-error.log benchmarksql-error-10-10.log
#          fi
#
#      - name: Start TPCC 10 Warehouses 100 terminals Test
#        if: ${{ always() && !cancelled() }}
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-tpcc
#
#          sed -i '/.*terminals=*/c\terminals=100' props_10.mo
#          sed -i '/expectedErrorCodes=/d' props_10.mo
#          ./runBenchmark.sh props_10.mo
#          ./runVerify.sh props_10.mo
#
#          if [ -f benchmarksql-error.log ];then
#            mv benchmarksql-error.log benchmarksql-error-10-100.log
#          fi
#
#      - name: Start TPCC 100 Warehouses 100 terminals Test
#        if: ${{ always() && !cancelled() }}
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-tpcc
#
#          sed -i '/.*terminals=*/c\terminals=100' props_100.mo
#          sed -i '/expectedErrorCodes=/d' props_100.mo
#          ./runBenchmark.sh props_100.mo
#          ./runVerify.sh props_100.mo
#
#          if [ -f benchmarksql-error.log ];then
#            mv benchmarksql-error.log benchmarksql-error-100-100.log
#          fi
#
#      - name: Start TPCC 100 Warehouses 1000 terminals Test
#        if: ${{ always() && !cancelled() }}
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-tpcc
#
#          sed -i '/.*terminals=*/c\terminals=1000' props_100.mo
#          sed -i '/expectedErrorCodes=/d' props_100.mo
#          ./runBenchmark.sh props_100.mo
#          ./runVerify.sh props_100.mo
#
#          if [ -f benchmarksql-error.log ];then
#            mv benchmarksql-error.log benchmarksql-error-100-1000.log
#          fi
#
#      - name: Start TPCC 500 Warehouses 500 terminals Test
#        if: ${{ always() && !cancelled() }}
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-tpcc
#
#          sed -i '/.*terminals=*/c\terminals=500' props_500.mo
#          sed -i '/expectedErrorCodes=/d' props_500.mo
#          ./runBenchmark.sh props_500.mo
#          ./runVerify.sh props_500.mo
#
#          if [ -f benchmarksql-error.log ];then
#            mv benchmarksql-error.log benchmarksql-error-500-500.log
#          fi
#
#      - name: Start TPCC 500 Warehouses 1000 terminals Test
#        if: ${{ always() && !cancelled() }}
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-tpcc
#
#          sed -i '/.*terminals=*/c\terminals=1000' props_500.mo
#          sed -i '/expectedErrorCodes=/d' props_500.mo
#          ./runBenchmark.sh props_500.mo
#          ./runVerify.sh props_500.mo
#
#          if [ -f benchmarksql-error.log ];then
#            mv benchmarksql-error.log benchmarksql-error-500-1000.log
#          fi
#
#      - name: Start TPCC 1000 Warehouses 1000 terminals Test
#        if: ${{ always() && !cancelled() }}
#        run: |
#          export LC_ALL="C.UTF-8"
#          locale
#          cd mo-tpcc
#
#          sed -i '/.*terminals=*/c\terminals=1000' props_1000.mo
#          sed -i '/expectedErrorCodes=/d' props_1000.mo
#          ./runBenchmark.sh props_1000.mo
#          ./runVerify.sh props_1000.mo
#
#          if [ -f benchmarksql-error.log ];then
#            mv benchmarksql-error.log benchmarksql-error-1000-1000.log
#          fi